@using Blazor.Serialization.Extensions

<MudTable Items=@Products Hover="true" Breakpoint="Breakpoint.Sm" AllowUnsorted=true Filter=OnFilter
    CanCancelEdit=true Context="product" Dense=true FixedHeader=true RowsPerPage=10 RowEditCommit=OnEdit>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_filter" Placeholder="Search products" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Price</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@product.Name</MudTd>
        <MudTd DataLabel="Description">@product.Description</MudTd>
        <MudTd DataLabel="Quantity">@product.Quantity.ToString("N0")</MudTd>
        <MudTd DataLabel="Price">@product.UnitPrice.ToString("C2")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    string? _filter;

    [Parameter]
    public HashSet<ProductDetails> Products { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ProductDetails> OnEditProduct { get; set; }

    void OnEdit(object model)
    {
        if (model is ProductDetails product &&
            OnEditProduct.HasDelegate)
        {
            _ = OnEditProduct.InvokeAsync(product);
        }
    }

    bool OnFilter(ProductDetails product)
    {
        if (product is not null)
        {
        }

        return false;
    }
}